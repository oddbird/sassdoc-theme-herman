@use 'sass:color';
@use 'sass:list';
@use 'sass:meta';
@use '../utilities';
@use 'pkg:accoutrement' as tools;

// Accoutrement Utils
// ==================

/// # Herman Config: Private Helpers
/// @group config-utils

// Functions
// ---------
/// These functions will be made available to
/// accoutrement tools
/// for use in configuration maps.
/// Register additional functions as needed,
/// or establish alias names for existing functions.
///
/// @group config-utils
/// @type map
///
/// @link https://www.oddbird.net/accoutrement Accoutrement
///
/// @prop {function | string} <alias> -
///   Use `get-function()` to capture a first-class function,
///   or use a string to reference existing functions and alias-keys
$functions: (
  'adjust': meta.get-function('adjust', $module: 'color'),
  'rgba': meta.get-function('rgba'),
  'convert': '#convert-units',
);

tools.$functions: $functions;

// Config
// ------
/// Internal utility for managing Herman and Accoutrement maps
/// in one single mixin.
/// In preparation for the Sass 3.5+ modular syntax,
/// this can only be done in the project being documented,
/// and is not included as part of the Herman API.
///
/// @group config-utils
/// @link https://www.oddbird.net/accoutrement Accoutrement
///
/// @param {string} $type -
///   The type of data being added, e.g.
///   `color/s`, `font/s`, `ratio/s`, `size/s`.
/// @param {string} $name -
///   The reference key for accessing this data.
///   This should generally be the same as the variable name --
///   e.g. `'brand-colors'` for the `$brand-colors` variable.
/// @param {map} $value -
///   The map data to be added to both
///   Accoutrement globals and Herman export.
///
/// @example scss
///   $brand-colors: (
///     'brand-orange': hsl(24, 100%, 39%),
///     'brand-blue': hsl(195, 85%, 35%),
///     'brand-pink': hsl(330, 85%, 48%) ('shade': 25%),
///   );
///
///   @include config.add('colors', 'brand-colors', $brand-colors);
@mixin add($type, $name, $value) {
  @if list.index('color' 'colors', $type) {
    @include tools.add-colors($value);
    @include utilities.add($type, $name, tools.compile-colors($value));
  } @else if list.index('size' 'sizes', $type) {
    @include tools.add-sizes($value);
    @include utilities.add($type, $name, tools.compile-sizes($value));
  } @else if list.index('ratio' 'ratios', $type) {
    @include tools.add-ratios($value);
    @include utilities.add($type, $name, tools.compile-ratios($value));
  } @else if list.index('font' 'fonts', $type) {
    @include tools.add-font($name, $value);
    @include utilities.add($type, $name, tools.font($name));
  }
}
