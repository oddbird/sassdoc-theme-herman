// Map Utility Tests
// =================

@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';
@use 'true';
@use 'pkg:accoutrement' as tools with (
  $functions: (
    'darken': meta.get-function('darken'),
    'desaturate': meta.get-function('desaturate'),
  )
);
@use '../../../scss/utilities/json-api' as *;
@use '../../../scss/utilities/maps' as *;

$colors-compiled: (
  'brand-blue': #0d7fa5,
  'light-gray': #dedede,
  'gray': #555b5e,
  'black': #3b4042,
);
$darken: (
  'brand-blue': #063646,
  'light-gray': #ababab,
  'gray': #252728,
  'black': #0b0c0c,
);
tools.$sizes: (
  'root': 20px,
  'rhythm': '#root'
    (
      'scale': '_fifth' 1,
      'convert': 'rem',
    )
);

$sizes-compiled: (
  'root': 20px,
  'rhythm': 1.5rem,
);

// Each Value
// ----------
@include true.describe('each-value [function]') {
  @include true.it('returns a map with values run through a given function') {
    @include true.assert-equal(
      each-value($colors-compiled, meta.get-function('darken'), 20%),
      $darken,
      $inspect: true
    );
  }
}

// Map Compile
// -----------
@include true.describe('each-key [function]') {
  @include true.it('returns a map with keys run through a given function') {
    @include true.assert-equal(
      each-key(tools.$sizes, meta.get-function('size', $module: 'tools')),
      $sizes-compiled,
      $inspect: true
    );
  }
}

// Herman Add
// ----------
@include true.describe('add [mixin]') {
  $herman: () !global;
  $empty: ();

  @include true.it('adds a map to the $herman global') {
    @include true.assert-equal($herman, $empty);
    @include add('colors', 'compiled', $colors-compiled);

    $expect: (
      'colors': (
        'compiled': $colors-compiled,
      ),
    );

    @include true.assert-equal($herman, $expect);
  }

  @include true.it('adds to existing data of the type') {
    $existing: map.get($herman, 'colors');
    $new: (
      'darken': $darken,
    );
    $expect: (
      'colors': map.merge($existing, $new),
    );

    @include add('colors', 'darken', $darken);
    @include true.assert-equal($herman, $expect);
  }

  @include true.it('fixes pluralization mistakes with known data types') {
    $existing: map.get($herman, 'colors');
    $new: (
      'darken-2': $darken,
    );
    $expect: (
      'colors': map.merge($existing, $new),
    );

    @include add('color', 'darken-2', $darken);
    @include true.assert-equal($herman, $expect);
  }
}
