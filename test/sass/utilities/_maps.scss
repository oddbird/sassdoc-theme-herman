// Map Utility Tests
// =================

@use 'sass:color';
@use 'sass:map';
@use 'sass:meta';

@use 'true';
@use '~accoutrement/sass/tools' with (
  $functions: (
    'darken': meta.get-function('darken'),
    'desaturate': meta.get-function('desaturate'),
    'convert': '#convert-units',
  ),
);

@use '../../../scss/utilities/json-api' as *;
@use '../../../scss/utilities/maps' as *;

@function compile-keys-test($key, $map) {
  @if map.has-key($map, $key) {
    @return 'great!';
  }

  @return null;
}

$colors-initial: (
  'brand-blue': hsl(195, 85%, 35%),
  'light-gray': '#brand-blue'
    (
      'tint': 80%,
      'desaturate': 80%,
    ),
  'gray': '#brand-blue'
    (
      'desaturate': 80%,
    ),
  'black': '#brand-blue'
    (
      'shade': 30% #000,
      'desaturate': 80%,
    ),
);

$colors-compiled: (
  'brand-blue': #0d7fa5,
  'light-gray': #dedede,
  'gray': #555b5e,
  'black': #3b4042,
);

$darken: (
  'brand-blue': #063646,
  'light-gray': #ababab,
  'gray': #252728,
  'black': #0b0c0c,
);

$sizes: (
  'root': 20px,
  'rhythm': '#root'
    (
      '_fifth': 1,
      'convert': 'rem',
    ),
);

$sizes-compiled: (
  'root': 20px,
  'rhythm': 1.5rem,
);

// Map Compile
// -----------
@include true.describe('map-compile [function]') {
  @include true.it('returns a map with values run through a given function') {
    @include true.assert-equal(
      compile($sizes, meta.get-function('size', $module: 'tools')),
      $sizes-compiled,
      $inspect: true
    );
  }

  @include true.it('allows extra args be passed in') {
    @include true.assert-equal(
      compile($colors-compiled, meta.get-function('darken'), 20%),
      $darken,
      $inspect: true
    );
  }

  @include true.it('runs compilation on the key rather than the map') {
    $test: (
      'a': 'hello world',
    );

    @include true.assert-equal(
      compile($test, meta.get-function('compile-keys-test'), $test),
      (
        'a': 'great!',
      )
    );
  }
}

// Herman Add
// ----------
@include true.describe('add [mixin]') {
  $herman: () !global;
  $empty: ();

  @include true.it('adds a map to the $herman global') {
    @include true.assert-equal($herman, $empty);

    @include add('colors', 'compiled', $colors-compiled);
    $expect: (
      'colors': (
        'compiled': $colors-compiled,
      ),
    );

    @include true.assert-equal($herman, $expect);
  }

  @include true.it('adds to existing data of the type') {
    @include add('colors', 'darken', $darken);
    $existing: map.get($herman, 'colors');
    $new: (
      'compiled': $colors-compiled,
    );
    $expect: (
      'colors': map.merge($existing, $new),
    );

    @include true.assert-equal($herman, $expect);
  }

  @include true.it('accepts compilation functions') {
    $herman: () !global;

    @include true.assert-equal($herman, $empty);

    @include add(
      'colors',
      'dark',
      $colors-compiled,
      meta.get-function('darken'),
      20%
    );
    $expect: (
      'colors': (
        'dark': $darken,
      ),
    );

    @include true.assert-equal($herman, $expect, $inspect: true);
  }
}
